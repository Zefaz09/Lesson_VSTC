document.addEventListener('deviceready', onDeviceReady, false);
async function viewShedule(url) {
    const text = document.getElementById("text");
    text.textContent = "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å"
    const response = await fetch("https://corsproxy.io/?" + encodeURIComponent(url));
    const html = await response.text();
    const doc = new DOMParser().parseFromString(html, "text/html");
    table = doc.getElementsByTagName("table")[0];
    const rows = table.getElementsByTagName("tr");
    let matrix = [];
    let x = 0;
    let y = 0;

    for (let row of rows) {
        const cells = row.getElementsByTagName("td");
        let x = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏

        for (let cell of cells) {
            const rowspan = parseInt(cell.getAttribute("rowspan") || "1", 10);
            const colspan = parseInt(cell.getAttribute("colspan") || "1", 10);

            // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            while (matrix[y] && matrix[y][x]) x++;

            for (let emptyY = 0; emptyY < rowspan; emptyY++) {
                if (!matrix[y + emptyY]) matrix[y + emptyY] = [];

                    for (let emptyX = 0; emptyX < colspan; emptyX++) {
                        matrix[y + emptyY][x + emptyX] = cell;
                }
            }

            x += colspan;
        }

    y++; // üìà –¥–≤–∏–≥–∞–µ–º —Å—Ç—Ä–æ–∫—É
    }

    console.log("–ú–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω");
    // üîç –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ "–û–°-21"
    let foundY = -1;
    let foundX = -1;

    for (let y = 0; y < matrix.length; y++) {
        for (let x = 0; x < matrix[y].length; x++) {
            const cell = matrix[y][x];
            if (cell && cell.textContent.trim() === "–í–†-21") {
                foundY = y;
                foundX = x;
                break;
            }
    }
    if (foundY !== -1) break;
    }

    let lesson = [];
    if (foundY === -1 || foundX === -1) {
    console.log("‚õî –ì—Ä—É–ø–ø–∞ –û–°-21 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    } else {
    for (let i = 0; i <= 11; i++) {
        const row = matrix[foundY + i];
        const cell = row?.[foundX];

        if (cell) {
            lesson.push(cell.textContent.trim())
        } else {
        console.log("üï≥Ô∏è –Ø—á–µ–π–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–≥–ª–æ—â–µ–Ω–∞ rowspan");
        }
    }
    }
    text.textContent = JSON.stringify(lesson)
}
function onDeviceReady() {
    viewShedule("https://www.vgtk.by/schedule/lessons/day-tomorrow.php")
}
